// <auto-generated />
using System;
using BlazorPunchCard.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorPunchCard.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240229080401_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlazorPunchCard.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d7eaad7-4b78-4e65-8765-076e403b57e4",
                            Email = "malinlindbom@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Malin Lindbom",
                            NormalizedEmail = "MALINLINDBLOM@HOTMAIL.COM",
                            NormalizedUserName = "MALINLINDBOM@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELcOzLhv72Qw/tjgrM6rp16qa+QC6duYJ/9wyY9xgk2WZskHW9eoUNQvDPHkSVv5OQ==",
                            PhoneNumber = "0701234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4f71a9a-f8bd-4606-a8c6-d22b8a6cc32c",
                            TwoFactorEnabled = false,
                            UserName = "malinlindbom@hotmail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbeefb5e-c839-47a0-b4b5-46392e4e9dd9",
                            Email = "jonwestman@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jon Westman",
                            NormalizedEmail = "JONWESTMAN@HOTMAIL.COM",
                            NormalizedUserName = "JONWESTMAN@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDKgoy7Z9yfJYuK8KLNI9ngGiIPNPFdFxGJrsyDK01GlVwoJ6LOzmGS5ZPOyv6hkow==",
                            PhoneNumber = "0730625968",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e7b1fc51-ab52-4735-8e89-66e178508998",
                            TwoFactorEnabled = false,
                            UserName = "jonwestman@hotmail.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2134b99b-18a2-4e65-baa2-e7d84aede8de",
                            Email = "andreasblom@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Andreas Blom",
                            NormalizedEmail = "ANDREASBLOM@HOTMAIL.COM",
                            NormalizedUserName = "ANDREASBLOM@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN3u+oOWCELyOkbeX4BgIblHzb51UllOPjHu6/uoybqdaYM8f7xC/FXhDAoP6N5bRw==",
                            PhoneNumber = "0721234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d3a615c-7be8-485e-bfb6-c53cdcf6db5f",
                            TwoFactorEnabled = false,
                            UserName = "andreasblom@hotmail.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87d09f4f-8cef-4dbc-8990-724ba6d9b18f",
                            Email = "eriksvensson@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Erik Svensson",
                            NormalizedEmail = "ERIKSVENSSON@HOTMAIL.COM",
                            NormalizedUserName = "ERIKSVENSSON@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM/vVrWxwHdgQeXM3jdgsqwaG75V9AcxioqyQAMvWFL3SArSDQxxJTUho3shW0rq8A==",
                            PhoneNumber = "0731234568",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8129399b-92a8-4a61-869c-3f686726bb34",
                            TwoFactorEnabled = false,
                            UserName = "eriksvensson@hotmail.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abac0096-d2b2-49e9-9976-f5aded581592",
                            Email = "saranordin@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Sara Nordin",
                            NormalizedEmail = "SARANORDIN@HOTMAIL.COM",
                            NormalizedUserName = "SARANORDIN@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPeZMR6a7DO+YY+9mcwoM21yXrrQFDPqLKZf2rDdp8VZPsfsWElqSs3fZ4fo2atF2w==",
                            PhoneNumber = "0741234569",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d15ca39-4061-419a-b32d-6f6ab347c5c1",
                            TwoFactorEnabled = false,
                            UserName = "saranordin@hotmail.com"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b896f7c1-e692-49c4-87b3-b9a54568d5d0",
                            Email = "lenakarlsson@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Lena Karlsson",
                            NormalizedEmail = "LENAKARLSSON@HOTMAIL.COM",
                            NormalizedUserName = "LENAKARLSSON@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECzgwT888dU9RsCIhy57JONkOOZ7WO8UNOuWttcLDbaZOjnAn0YhcbmZWSPeGAUeKg==",
                            PhoneNumber = "0751234570",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fde28768-931b-4dd2-9b31-a2fea282b4ea",
                            TwoFactorEnabled = false,
                            UserName = "lenakarlsson@hotmail.com"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66ecf04d-377a-4f81-9118-c866e46e3662",
                            Email = "oscarhedlund@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Oscar Hedlund",
                            NormalizedEmail = "OSCARHEDLUND@HOTMAIL.COM",
                            NormalizedUserName = "OSCARHEDLUND@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELEMS055XDOe3uxycp92PCo+JiyJaDl/dGrQs7KAEKEV4r0b0EtQISgSsIU8YlnYPw==",
                            PhoneNumber = "0761234571",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9797bd83-a8cd-4b03-ac40-3c3017fc7dc1",
                            TwoFactorEnabled = false,
                            UserName = "oscarhedlund@hotmail.com"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87985b17-0fe8-49bf-a7b4-9eeea524c480",
                            Email = "emmajohansson@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Emma Johansson",
                            NormalizedEmail = "EMMAJOHANSSON@HOTMAIL.COM",
                            NormalizedUserName = "EMMAJOHANSSON@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAs3NlbqpdX5NTqBVJRSi6BbooFjJ9H45z09eyWHQHn4sRecYqiOlxO9NmREFayS7w==",
                            PhoneNumber = "0771234572",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7df0b7c6-0382-4632-936a-3a2b33b878df",
                            TwoFactorEnabled = false,
                            UserName = "emmajohansson@hotmail.com"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fafcd08e-253d-4e7e-95bf-61a971ce99f4",
                            Email = "danielaberg@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Daniel Åberg",
                            NormalizedEmail = "DANIELABERG@HOTMAIL.COM",
                            NormalizedUserName = "DANIELABERG@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJDyB20pUwynYsOEkWF7u2vzKIC04Dc1BtPjttTGEkYK/v5l94pF7FlanRGvRegsDg==",
                            PhoneNumber = "0781234573",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43c1f906-6df6-47aa-a976-79871adbf8c1",
                            TwoFactorEnabled = false,
                            UserName = "danielaberg@hotmail.com"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c09b9516-fc9b-47a2-9731-92a650dc19ce",
                            Email = "lindagustafsson@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Linda Gustafsson",
                            NormalizedEmail = "LINDAGUSTAFSSON@HOTMAIL.COM",
                            NormalizedUserName = "LINDAGUSTAFSSON@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEodk8P7UxJPTnE6OhCe79wmot9R5Ynrnt1p/93HbrRdv4I8V7VEfeJZixW20UfP6A==",
                            PhoneNumber = "0761234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b91d332-f77f-4a58-ac52-2de1acd55309",
                            TwoFactorEnabled = false,
                            UserName = "lindagustafsson@hotmail.com"
                        },
                        new
                        {
                            Id = "11",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2b43ad7-f0e3-4c6c-a040-b5b453f65f34",
                            Email = "bokhornan@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "BokHörnan",
                            NormalizedEmail = "BOKHORNAN@HOTMAIL.COM",
                            NormalizedUserName = "BOKHORNAN@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIpRW5uWEzK2x8NyESgvQttOG8jnvGQXEW36VLPvsuXziDRWz7PsNkKrVVxdM17Ghg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "edc06325-be4e-4612-8f3d-15c1de0c77da",
                            TwoFactorEnabled = false,
                            UserName = "bokhornan@hotmail.com"
                        },
                        new
                        {
                            Id = "12",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16d6cdc7-1fd9-48b4-b5ff-5b5f73d2deea",
                            Email = "dinel@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Din El",
                            NormalizedEmail = "DINEL@HOTMAIL.COM",
                            NormalizedUserName = "DINEL@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL/+oN2zKN56KunnpYk9k15xgsSwBQnJ55iTKV21mALKZk4/A+9b6Bfk6D85iDVoCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa2337b7-acf3-4471-8436-348aa01ff7eb",
                            TwoFactorEnabled = false,
                            UserName = "dinel@hotmail.com"
                        },
                        new
                        {
                            Id = "13",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b75f4a7-fe8f-4b07-9c9b-580abc147854",
                            Email = "hemstadarna@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Hemstädarna",
                            NormalizedEmail = "HEMSTADARNA@HOTMAIL.COM",
                            NormalizedUserName = "HEMSTADARNA@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMuk+A/yJLSb2j3XduTZ1cC2hgsn3oTRxX3bSS0OWL9NsnbDm/IP4R7/P8OMKVTNjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad7d840c-87e8-4105-b66e-07e525c7416f",
                            TwoFactorEnabled = false,
                            UserName = "hemstadarna@hotmail.com"
                        },
                        new
                        {
                            Id = "14",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8075bf13-fc19-4bb5-bf57-ee00bb165f48",
                            Email = "cykelverkstan@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Cykelverkstan",
                            NormalizedEmail = "CYKELVERKSTAN@HOTMAIL.COM",
                            NormalizedUserName = "CYKELVERKSTAN@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEeZQLd44w1rBkxocRUyjsJkc55vqfoopBNOGopxITkEE74eAm5ty/WNWuHneez3bA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3fe00155-c385-4a75-bd18-e9b83b52e77b",
                            TwoFactorEnabled = false,
                            UserName = "cykelverkstan@hotmail.com"
                        },
                        new
                        {
                            Id = "15",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af08f071-1bf2-4f0f-aa05-5039c9938a4f",
                            Email = "klippoteket@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Klippoteket",
                            NormalizedEmail = "KLIPPOTEKET@HOTMAIL.COM",
                            NormalizedUserName = "KLIPPOTEKET@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEfYJRjzk/4KPk4aoBpOsmz0trkTMr/xWchnfufuDEKpU0m9W/Vo/6fduRHhjYJtEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d1e5e214-c003-4a9f-acb0-ff30ccce58bb",
                            TwoFactorEnabled = false,
                            UserName = "klippoteket@hotmail.com"
                        },
                        new
                        {
                            Id = "16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d432dba2-0a67-4c16-bcf1-ac1cf837c623",
                            Email = "blomsterplockarna@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Blomsterplockarna",
                            NormalizedEmail = "BLOMSTERPLOCKARNA@HOTMAIL.COM",
                            NormalizedUserName = "BLOMSTERPLOCKARNA@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAxyuKe6oJSxkZiMf1fvANo5hxik0rUkAo7MRn1l6JASD+J75KXJ/ggZeD4PpX5CKw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ff75d66-9af1-40b9-b173-2f8a8aae8c4f",
                            TwoFactorEnabled = false,
                            UserName = "blomsterplockarna@hotmail.com"
                        },
                        new
                        {
                            Id = "17",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91276c2f-147c-4a6e-bd25-6fc0cbbaef15",
                            Email = "hantverksbageriet@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Hantverksbageriet",
                            NormalizedEmail = "HANTVERKSBAKERIET@HOTMAIL.COM",
                            NormalizedUserName = "HANTVERKSBAKERIET@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAA9Zz1gGRcY2ajJxhhdJziDWexMnVZTZ/DxbcYgMfYQVans0GH3pE8VwFW/M2I4ow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a6ec2161-5a71-4b23-9fc7-bc7307f0f300",
                            TwoFactorEnabled = false,
                            UserName = "hantverksbageriet@hotmail.com"
                        },
                        new
                        {
                            Id = "18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08d313f9-e4aa-4d1a-9345-0f6ca30dbe67",
                            Email = "guldkammenfrisor@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Guldkammen Frisör",
                            NormalizedEmail = "GULDKAMMENFRISOR@HOTMAIL.COM",
                            NormalizedUserName = "GULDKAMMENFRISOR@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK5raWVGtaBiHlGoy/oquZCXXAxhAm2vlPwH3YciDR22muTTH1cHbN6iIeeend7Vbg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8c7183b-b73b-411b-8aab-95966925a61c",
                            TwoFactorEnabled = false,
                            UserName = "guldkammenfrisor@hotmail.com"
                        },
                        new
                        {
                            Id = "19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8dd7cc9-01b1-4269-a4b0-c0a3e9300ad6",
                            Email = "fotvardskliniken@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Fotvårdskliniken",
                            NormalizedEmail = "FOTVARDSKLINIKEN@HOTMAIL.COM",
                            NormalizedUserName = "FOTVARDSKLINIKEN@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHB5HQRzISrjO51HYm4+nMoHiHie2vO9SxGzrQGAewA985VzotW6gE7Mz7/sKFW9nw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae38b5ef-2820-410e-8b55-5dc64ae6e11c",
                            TwoFactorEnabled = false,
                            UserName = "fotvardskliniken@hotmail.com"
                        },
                        new
                        {
                            Id = "20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af38e6a3-7c62-4229-a415-d70e2ef81c56",
                            Email = "takskottarna@hotmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "TakSkottarna",
                            NormalizedEmail = "TAKSKOTTARNA@HOTMAIL.COM",
                            NormalizedUserName = "TAKSKOTTARNA@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMmFSAK6EntSjqawf2gVpPMOnaDZcVlQHth3zWpjJSRVG41Pm79IaL5VKR+gW1V2cg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f872aed7-1f76-4ffa-ba29-e45406b080e5",
                            TwoFactorEnabled = false,
                            UserName = "takskottarna@hotmail.com"
                        });
                });

            modelBuilder.Entity("BlazorPunchCard.Data.Models.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PictureId"));

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FK_ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileStorageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PictureId");

                    b.HasIndex("FK_ApplicationUserId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("BlazorPunchCard.Data.Models.Punch", b =>
                {
                    b.Property<int>("PunchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PunchId"));

                    b.Property<int>("FK_UserPunchCard")
                        .HasColumnType("int");

                    b.Property<DateTime>("PunchTimeRegistered")
                        .HasColumnType("datetime2");

                    b.HasKey("PunchId");

                    b.HasIndex("FK_UserPunchCard");

                    b.ToTable("Punches");
                });

            modelBuilder.Entity("BlazorPunchCard.Data.Models.Reward", b =>
                {
                    b.Property<int>("RewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RewardId"));

                    b.Property<int>("FK_UserPunchCardId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RedemptionCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeOfReward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RewardId");

                    b.HasIndex("FK_UserPunchCardId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("BlazorPunchCard.Data.Models.UserPunchCard", b =>
                {
                    b.Property<int>("UserPunchCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPunchCardId"));

                    b.Property<string>("ApplicationUsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FK_ApplicationUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FK_PunchCardId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("UserPunchCardId");

                    b.HasIndex("ApplicationUsersId");

                    b.HasIndex("FK_PunchCardId");

                    b.ToTable("UserPunchCards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "735047f0-0f2a-4b95-8c5a-8a354dde27fa",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "e921999a-7655-4c81-ad2e-18258c30d747",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "e921999a-7655-4c81-ad2e-18258c30d747"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "e921999a-7655-4c81-ad2e-18258c30d747"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "e921999a-7655-4c81-ad2e-18258c30d747"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "e921999a-7655-4c81-ad2e-18258c30d747"
                        },
                        new
                        {
                            UserId = "5",
                            RoleId = "e921999a-7655-4c81-ad2e-18258c30d747"
                        },
                        new
                        {
                            UserId = "6",
                            RoleId = "e921999a-7655-4c81-ad2e-18258c30d747"
                        },
                        new
                        {
                            UserId = "7",
                            RoleId = "e921999a-7655-4c81-ad2e-18258c30d747"
                        },
                        new
                        {
                            UserId = "8",
                            RoleId = "e921999a-7655-4c81-ad2e-18258c30d747"
                        },
                        new
                        {
                            UserId = "9",
                            RoleId = "e921999a-7655-4c81-ad2e-18258c30d747"
                        },
                        new
                        {
                            UserId = "10",
                            RoleId = "e921999a-7655-4c81-ad2e-18258c30d747"
                        },
                        new
                        {
                            UserId = "11",
                            RoleId = "e921999a-7655-4c81-ad2e-18258c30d747"
                        },
                        new
                        {
                            UserId = "12",
                            RoleId = "735047f0-0f2a-4b95-8c5a-8a354dde27fa"
                        },
                        new
                        {
                            UserId = "13",
                            RoleId = "735047f0-0f2a-4b95-8c5a-8a354dde27fa"
                        },
                        new
                        {
                            UserId = "14",
                            RoleId = "735047f0-0f2a-4b95-8c5a-8a354dde27fa"
                        },
                        new
                        {
                            UserId = "15",
                            RoleId = "735047f0-0f2a-4b95-8c5a-8a354dde27fa"
                        },
                        new
                        {
                            UserId = "16",
                            RoleId = "735047f0-0f2a-4b95-8c5a-8a354dde27fa"
                        },
                        new
                        {
                            UserId = "17",
                            RoleId = "735047f0-0f2a-4b95-8c5a-8a354dde27fa"
                        },
                        new
                        {
                            UserId = "18",
                            RoleId = "735047f0-0f2a-4b95-8c5a-8a354dde27fa"
                        },
                        new
                        {
                            UserId = "19",
                            RoleId = "735047f0-0f2a-4b95-8c5a-8a354dde27fa"
                        },
                        new
                        {
                            UserId = "20",
                            RoleId = "735047f0-0f2a-4b95-8c5a-8a354dde27fa"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Shared.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FK_ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("FK_MemberShipLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Orgnr")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("CompanyId");

                    b.HasIndex("FK_ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[FK_ApplicationUserId] IS NOT NULL");

                    b.HasIndex("FK_MemberShipLevelId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 11,
                            CompanyName = "BokHörnan",
                            FK_ApplicationUserId = "11",
                            Orgnr = "456789"
                        },
                        new
                        {
                            CompanyId = 12,
                            CompanyName = "Din El",
                            FK_ApplicationUserId = "12",
                            Orgnr = "567890"
                        },
                        new
                        {
                            CompanyId = 13,
                            CompanyName = "Hemstädarna",
                            FK_ApplicationUserId = "13",
                            Orgnr = "678901"
                        },
                        new
                        {
                            CompanyId = 14,
                            CompanyName = "Cykelverkstan",
                            FK_ApplicationUserId = "14",
                            Orgnr = "789012"
                        },
                        new
                        {
                            CompanyId = 15,
                            CompanyName = "Klippoteket",
                            FK_ApplicationUserId = "15",
                            Orgnr = "890123"
                        },
                        new
                        {
                            CompanyId = 16,
                            CompanyName = "Blomsterplockarna",
                            FK_ApplicationUserId = "16",
                            Orgnr = "901234"
                        },
                        new
                        {
                            CompanyId = 17,
                            CompanyName = "Hantverksbageriet",
                            FK_ApplicationUserId = "17",
                            Orgnr = "012345"
                        },
                        new
                        {
                            CompanyId = 18,
                            CompanyName = "Guldkammen Frisör",
                            FK_ApplicationUserId = "18",
                            Orgnr = "1234567"
                        },
                        new
                        {
                            CompanyId = 19,
                            CompanyName = "Fotvårdskliniken",
                            FK_ApplicationUserId = "19",
                            Orgnr = "2345678"
                        },
                        new
                        {
                            CompanyId = 20,
                            CompanyName = "TakSkottarna",
                            FK_ApplicationUserId = "20",
                            Orgnr = "3456789"
                        });
                });

            modelBuilder.Entity("Shared.Models.MembershipLevel", b =>
                {
                    b.Property<int>("MembershipLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MembershipLevelId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("MembershipLevelId");

                    b.ToTable("MembershipLevels");
                });

            modelBuilder.Entity("Shared.Models.PunchCard", b =>
                {
                    b.Property<int>("PunchCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PunchCardId"));

                    b.Property<DateOnly>("DurationEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DurationStart")
                        .HasColumnType("date");

                    b.Property<int>("FK_CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("LinkFacebook")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("LinkInstagram")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("LinkWebsite")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("PunchCardCount")
                        .HasColumnType("int");

                    b.Property<string>("PunchCardName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Reward")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("PunchCardId");

                    b.HasIndex("FK_CompanyId");

                    b.ToTable("PunchCards");

                    b.HasData(
                        new
                        {
                            PunchCardId = 1,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 11,
                            LinkFacebook = "http://facebook.com/bokhornan",
                            LinkInstagram = "http://instagram.com/bokhornan",
                            LinkWebsite = "http://bokhornan.se",
                            PunchCardCount = 5,
                            PunchCardName = "BokKortet",
                            Reward = "Få den 5:e boken gratis!"
                        },
                        new
                        {
                            PunchCardId = 2,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 12,
                            LinkFacebook = "http://facebook.com/dinel",
                            LinkInstagram = "http://instagram.com/dinel",
                            LinkWebsite = "http://dinel.se",
                            PunchCardCount = 3,
                            PunchCardName = "ElKortet",
                            Reward = "10% rabatt på nästa service"
                        },
                        new
                        {
                            PunchCardId = 3,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 13,
                            LinkFacebook = "http://facebook.com/hemstadarna",
                            LinkInstagram = "http://instagram.com/hemstadarna",
                            LinkWebsite = "http://hemstadarna.se",
                            PunchCardCount = 10,
                            PunchCardName = "StädKortet",
                            Reward = "Var 10:e städning gratis"
                        },
                        new
                        {
                            PunchCardId = 4,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 14,
                            LinkFacebook = "http://facebook.com/cykelverkstan",
                            LinkInstagram = "http://instagram.com/cykelverkstan",
                            LinkWebsite = "http://cykelverkstan.se",
                            PunchCardCount = 5,
                            PunchCardName = "CykelKortet",
                            Reward = "Gratis service efter 5 reparationer"
                        },
                        new
                        {
                            PunchCardId = 5,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 15,
                            LinkFacebook = "http://facebook.com/klippoteket",
                            LinkInstagram = "http://instagram.com/klippoteket",
                            LinkWebsite = "http://klippoteket.se",
                            PunchCardCount = 6,
                            PunchCardName = "KlippKortet",
                            Reward = "Var 6:e klippning gratis"
                        },
                        new
                        {
                            PunchCardId = 6,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 16,
                            LinkFacebook = "http://facebook.com/blomsterplockarna",
                            LinkInstagram = "http://instagram.com/blomsterplockarna",
                            LinkWebsite = "http://blomsterplockarna.se",
                            PunchCardCount = 5,
                            PunchCardName = "BlomKortet",
                            Reward = "15% rabatt efter 5 köp"
                        },
                        new
                        {
                            PunchCardId = 7,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 17,
                            LinkFacebook = "http://facebook.com/hantverksbageriet",
                            LinkInstagram = "http://instagram.com/hantverksbageriet",
                            LinkWebsite = "http://hantverksbageriet.se",
                            PunchCardCount = 8,
                            PunchCardName = "BageriKortet",
                            Reward = "Köp 7 bröd, få det 8:e gratis"
                        },
                        new
                        {
                            PunchCardId = 8,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 18,
                            LinkFacebook = "http://facebook.com/guldkammenfrisor",
                            LinkInstagram = "http://instagram.com/guldkammenfrisor",
                            LinkWebsite = "http://guldkammenfrisor.se",
                            PunchCardCount = 5,
                            PunchCardName = "FrisörKortet",
                            Reward = "20% rabatt på färgning efter 5 besök"
                        },
                        new
                        {
                            PunchCardId = 9,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 19,
                            LinkFacebook = "http://facebook.com/fotvardskliniken",
                            LinkInstagram = "http://instagram.com/fotvardskliniken",
                            LinkWebsite = "http://fotvardskliniken.se",
                            PunchCardCount = 4,
                            PunchCardName = "FotvårdKortet",
                            Reward = "En gratis fotmassage efter 4 behandlingar"
                        },
                        new
                        {
                            PunchCardId = 10,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 20,
                            LinkFacebook = "http://facebook.com/takskottarna",
                            LinkInstagram = "http://instagram.com/takskottarna",
                            LinkWebsite = "http://takskottarna.se",
                            PunchCardCount = 5,
                            PunchCardName = "SnöKortet",
                            Reward = "Gratis takskottning efter varje 5:e tillfälle"
                        },
                        new
                        {
                            PunchCardId = 13,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 17,
                            LinkFacebook = "http://facebook.com/hantverksbageriet",
                            LinkInstagram = "http://instagram.com/hantverksbageriet",
                            LinkWebsite = "http://hantverksbageriet.se",
                            PunchCardCount = 10,
                            PunchCardName = "BrödPlusKortet",
                            Reward = "Dubbla stämplar på tisdagar"
                        },
                        new
                        {
                            PunchCardId = 14,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 18,
                            LinkFacebook = "http://facebook.com/guldkammenfrisor",
                            LinkInstagram = "http://instagram.com/guldkammenfrisor",
                            LinkWebsite = "http://guldkammenfrisor.se",
                            PunchCardCount = 3,
                            PunchCardName = "StylingKortet",
                            Reward = "Gratis stylingprodukt efter 3 klippningar"
                        },
                        new
                        {
                            PunchCardId = 15,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 19,
                            LinkFacebook = "http://facebook.com/fotvardskliniken",
                            LinkInstagram = "http://instagram.com/fotvardskliniken",
                            LinkWebsite = "http://fotvardskliniken.se",
                            PunchCardCount = 1,
                            PunchCardName = "VårdFörFötternaKortet",
                            Reward = "10% rabatt på nästa köp av fotvårdsprodukter"
                        },
                        new
                        {
                            PunchCardId = 16,
                            DurationEnd = new DateOnly(2025, 1, 1),
                            DurationStart = new DateOnly(2024, 1, 1),
                            FK_CompanyId = 20,
                            LinkFacebook = "http://facebook.com/takskottarna",
                            LinkInstagram = "http://instagram.com/takskottarna",
                            LinkWebsite = "http://takskottarna.se",
                            PunchCardCount = 10,
                            PunchCardName = "IsbrytarenKortet",
                            Reward = "20% rabatt på snöröjningstjänster efter 10 köp"
                        });
                });

            modelBuilder.Entity("BlazorPunchCard.Data.Models.Picture", b =>
                {
                    b.HasOne("BlazorPunchCard.Data.ApplicationUser", "ApplicationUsers")
                        .WithMany("Pictures")
                        .HasForeignKey("FK_ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUsers");
                });

            modelBuilder.Entity("BlazorPunchCard.Data.Models.Punch", b =>
                {
                    b.HasOne("BlazorPunchCard.Data.Models.UserPunchCard", "UserPunchCards")
                        .WithMany("Punches")
                        .HasForeignKey("FK_UserPunchCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPunchCards");
                });

            modelBuilder.Entity("BlazorPunchCard.Data.Models.Reward", b =>
                {
                    b.HasOne("BlazorPunchCard.Data.Models.UserPunchCard", "UserPunchCards")
                        .WithMany()
                        .HasForeignKey("FK_UserPunchCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPunchCards");
                });

            modelBuilder.Entity("BlazorPunchCard.Data.Models.UserPunchCard", b =>
                {
                    b.HasOne("BlazorPunchCard.Data.ApplicationUser", "ApplicationUsers")
                        .WithMany("UserPunchCards")
                        .HasForeignKey("ApplicationUsersId");

                    b.HasOne("Shared.Models.PunchCard", "PunchCards")
                        .WithMany("UserPunchCards")
                        .HasForeignKey("FK_PunchCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUsers");

                    b.Navigation("PunchCards");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlazorPunchCard.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlazorPunchCard.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorPunchCard.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlazorPunchCard.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Models.Company", b =>
                {
                    b.HasOne("BlazorPunchCard.Data.ApplicationUser", "ApplicationUsers")
                        .WithOne("Company")
                        .HasForeignKey("Shared.Models.Company", "FK_ApplicationUserId");

                    b.HasOne("Shared.Models.MembershipLevel", "MemberShipLevels")
                        .WithMany("Companies")
                        .HasForeignKey("FK_MemberShipLevelId");

                    b.Navigation("ApplicationUsers");

                    b.Navigation("MemberShipLevels");
                });

            modelBuilder.Entity("Shared.Models.PunchCard", b =>
                {
                    b.HasOne("Shared.Models.Company", "Companies")
                        .WithMany("PunchCards")
                        .HasForeignKey("FK_CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("BlazorPunchCard.Data.ApplicationUser", b =>
                {
                    b.Navigation("Company");

                    b.Navigation("Pictures");

                    b.Navigation("UserPunchCards");
                });

            modelBuilder.Entity("BlazorPunchCard.Data.Models.UserPunchCard", b =>
                {
                    b.Navigation("Punches");
                });

            modelBuilder.Entity("Shared.Models.Company", b =>
                {
                    b.Navigation("PunchCards");
                });

            modelBuilder.Entity("Shared.Models.MembershipLevel", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Shared.Models.PunchCard", b =>
                {
                    b.Navigation("UserPunchCards");
                });
#pragma warning restore 612, 618
        }
    }
}
