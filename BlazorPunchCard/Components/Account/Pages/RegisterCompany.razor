@page "/Account/RegisterCompany"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BlazorPunchCard.Controller
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.UI.Services
@using Microsoft.AspNetCore.WebUtilities
@using BlazorPunchCard.Data
@using global::Shared.Models

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager
@inject ApplicationDbContext DbContext
@inject MailController MailController

<PageTitle>Registerera företag</PageTitle>

<div class="col-lg-4 col-md-12 col-sm-12 mx-auto mb-4">
    <Card Style="width: 100%;">
        <CardBody Class="text-center shadow">
            <CardTitle><h2>Registrering Företag</h2></CardTitle>
            <CardText>
                <StatusMessage Message="@Message" />
                <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                    <DataAnnotationsValidator />
                    <h2>Skapa konto</h2>
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-2">
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="namn@exempel.com" />
                        <label for="email">E-post</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-2">
                        <InputText @bind-Value="Input.CompanyName" class="form-control" aria-required="true" placeholder="Företagsnamn AB" />
                        <label for="companyname">Företagsnamn</label>
                        <ValidationMessage For="() => Input.CompanyName" class="text-danger" />
                    </div>
                    <div class="form-floating mb-2">
                        <InputText @bind-Value="Input.Orgnr" class="form-control" aria-required="true" placeholder="Orgnr" />
                        <label for="orgnr">Organisationsnummer</label>
                        <ValidationMessage For="() => Input.Orgnr" class="text-danger" />
                    </div>
                    <div class="form-floating mb-2">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Lösenord" />
                        <label for="password">Lösenord</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="form-floating mb-2">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Lösenord" />
                        <label for="confirm-password">Bekräfta Lösenord</label>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Registrera</button>
                </EditForm>
            </CardText>
        </CardBody>
    </Card>
</div>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var existingUser = await UserManager.FindByEmailAsync(Input.Email);
        if (existingUser != null)
        {
            identityErrors = new List<IdentityError>
            {
                new IdentityError { Description = "Ett konto med denna e-postadress finns redan." }
            };
            return;
        }

        var user = CreateUser();
        user.Company = new Company { CompanyName = Input.CompanyName, Orgnr = Input.Orgnr };

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }
        else
        {
            await UserManager.AddToRoleAsync(user, "Admin");
            // Save changes to the database for the user and associated company
            await UserStore.UpdateAsync(user, CancellationToken.None);
            await DbContext.SaveChangesAsync();
        }


        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await MailController.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }
    public class MaxLengthAttribute : ValidationAttribute
    {
        private readonly int _maxLength;

        public MaxLengthAttribute(int maxLength)
        {
            _maxLength = maxLength;
            ErrorMessage = "För många siffror.";
        }

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value != null)
            {
                var length = value.ToString().Length;
                if (length > _maxLength)
                {
                    return new ValidationResult(ErrorMessage);
                }
            }

            return ValidationResult.Success;
        }
    }
    private sealed class InputModel
    {
        [Required(ErrorMessage = "Fältet E-post krävs")]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Fältet Företagsnamn krävs")]
        [Display(Name = "CompanyName")]
        public string CompanyName { get; set; } = "";

        [Required(ErrorMessage = "Fältet organisationsnummer krävs")]
        [MaxLength(12, ErrorMessage = "För många siffror i organasitionsnummer.")]
        [Display(Name = "Orgnr")]
        [RegularExpression("^[0-9]*$", ErrorMessage = "Endast siffror tillåtna i organasitionsnummer.")]
        public string Orgnr { get; set; } = "";

        [Required(ErrorMessage = "Fältet lösenord krävs")]
        [StringLength(100, ErrorMessage = "{0} måste vara minst {2} och högst {1} tecken långt.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "Lösenordet och bekräftelsen av lösenordet matchar inte.")]
        public string ConfirmPassword { get; set; } = "";
    }
}