@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorPunchCard.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<div class="col-lg-4 col-md-12 col-sm-12 mx-auto mb-4">
            <Card Style="width: 100%;">
                <CardBody Class="text-center shadow">
                <CardTitle><h2>Inloggning</h2></CardTitle>
                    <CardText>
                        <!-- Inloggningsformulär -->
                        <StatusMessage Message="@errorMessage" />
                        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                            <DataAnnotationsValidator />
                            <hr />
                            <ValidationSummary class="text-danger" role="alert" />
                            <div class="form-floating mb-2">
                                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <label for="email" class="form-label">E-post</label>
                                <ValidationMessage For="() => Input.Email" class="text-danger" />
                            </div>
                            <div class="form-floating mb-2">
                                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                                <label for="password" class="form-label">Lösenord</label>
                                <ValidationMessage For="() => Input.Password" class="text-danger" />
                            </div>
                            <div class="checkbox mb-2">
                                <label class="form-label d-flex justify-content-center">
                                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input mb2" />
                                         Kom ihåg mig
                                </label>
                            </div>
                            <div class="d-flex justify-content-center mb-3">
                                <BlazorBootstrap.Button Class="custom-button" Type="BlazorBootstrap.ButtonType.Submit">Logga in</BlazorBootstrap.Button>
                            </div>
                           @*  <br /><br /> *@
                            <div class="justify-content-center">
                                <p>
                                    <a class="d-flex justify-content-center" href="Account/ForgotPassword">Glömt lösenordet?</a>
                                </p>
                                <p>
                            <a class="d-flex justify-content-center" href="Account/ResendEmailConfirmation">Skicka E-post igen</a>@* <br /> *@
                                </p>
                                <p>
                                    <h7 class="d-flex justify-content-center">Inget konto?</h7>
                                    <h7 class="d-flex justify-content-center">Registrera dig här</h7>
                                    <div class="d-flex justify-content-center">
                                <BlazorBootstrap.Button Class="custom-button" To="Account/Register" Type="BlazorBootstrap.ButtonType.Link">Privat</BlazorBootstrap.Button>
                                <BlazorBootstrap.Button Class="custom-button mx-2" To="Account/RegisterCompany" Type="BlazorBootstrap.ButtonType.Link">Företag</BlazorBootstrap.Button>
                                    </div>
                                </p>
                            </div>
                        </EditForm>
                    </CardText>
                </CardBody>
            </Card>
        </div>

@code {
    private string? errorMessage;
    private string currentUserRole = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            var user = await UserManager.FindByEmailAsync(Input.Email);
            var roles = await UserManager.GetRolesAsync(user);
            if (roles.Contains("Admin")) // Kontrollera om användaren har rollen "Admin"
            {
                // Redirect till CorporateOverview-sidan om användaren är admin
                RedirectManager.RedirectTo("/CorporateOverview");
            }
            else
            {
                RedirectManager.RedirectTo("/CustomerHome"); // Redirect till CustomerHome om det inte är en admin
            }
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Fel: Ogiltigt inloggningsförsök.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Fältet E-post krävs")]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Fältet lösenord krävs")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}


<style>
	/* Bakgrunden */
	.home-background-container {
		display: flex;
		align-items: center;
		justify-content: center;
		background-color: #A3B6B4;
		min-height: 100vh;
		padding: 20px;
		border-radius: 10px;
	}

	.custom-button {
		background-color: #31525B;
		color: #FFFFFF;
		box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
		transition: background-color 0.3s ease, box-shadow 0.3s ease;
		border-radius: 5px;
		width: 10rem;
		height: 2.3rem;
	}

		.custom-button:hover {
			background-color: #FBBA00;
			color: black;
			box-shadow: 1rem 1rem 2rem rgba(0, 0, 0, 0.1);
		}
</style>